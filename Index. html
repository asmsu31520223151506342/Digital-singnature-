<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Handwritten Digit Recognition</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="script.js" defer></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Handwritten Digit Recognition</h1>
    
    <canvas id="canvas"></canvas>
    <br>
    <button onclick="clearCanvas()">Clear</button>
    <button onclick="predictDigit()">Predict</button>
    <button onclick="downloadImage()">Download</button>
    <h2>Prediction: <span id="prediction">?</span></h2>
</body>
</html>
2.2 CSS (styles.css)
Responsive design and optimized UI styling.

css
Copy
Edit
body {
    text-align: center;
    font-family: Arial, sans-serif;
}

canvas {
    border: 2px solid black;
    background-color: black;
    cursor: crosshair;
    width: 280px;
    height: 280px;
}

button {
    margin: 10px;
    padding: 12px;
    font-size: 16px;
    cursor: pointer;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 5px;
}

button:hover {
    background-color: #0056b3;
}
2.3 JavaScript (script.js)
Handles drawing, smoothing strokes, resizing images, and making predictions.

javascript
Copy
Edit
let model;
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const predictionText = document.getElementById('prediction');

canvas.width = 280;
canvas.height = 280;
ctx.fillStyle = "black";
ctx.fillRect(0, 0, canvas.width, canvas.height);
ctx.lineWidth = 15;
ctx.lineCap = "round";
ctx.strokeStyle = "white";

let drawing = false;
canvas.addEventListener('mousedown', startDrawing);
canvas.addEventListener('mouseup', stopDrawing);
canvas.addEventListener('mousemove', draw);
canvas.addEventListener('touchstart', startDrawing);
canvas.addEventListener('touchend', stopDrawing);
canvas.addEventListener('touchmove', draw);

function startDrawing(event) {
    drawing = true;
    draw(event);
}

function stopDrawing() {
    drawing = false;
    ctx.beginPath();
}

function draw(event) {
    if (!drawing) return;

    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;

    let x = (event.clientX || event.touches[0].clientX) - rect.left;
    let y = (event.clientY || event.touches[0].clientY) - rect.top;

    x *= scaleX;
    y *= scaleY;

    ctx.lineTo(x, y);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(x, y);
}

// Load TensorFlow.js model
async function loadModel() {
    model = await tf.loadLayersModel('tfjs_model/model.json');
    console.log("Model Loaded!");
}
loadModel();

// Clear the canvas
function clearCanvas() {
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    predictionText.innerText = "?";
}

// Process the image and make predictions
async function predictDigit() {
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    let imgTensor = tf.browser.fromPixels(imageData, 1)
        .resizeNearestNeighbor([28, 28])
        .toFloat()
        .div(tf.scalar(255))
        .expandDims(0);
    
    const predictions = model.predict(imgTensor);
    const predictedDigit = predictions.argMax(1).dataSync()[0];
    predictionText.innerText = predictedDigit;
}

